import { addClass, removeClass, getUpdateHost, syncNow } from "./background.js";

let updateHost = getUpdateHost();

function replaceWithDaysOfWeek(input) {
    //Generated by Bing Chat
    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    return input.split('').map(char => daysOfWeek[parseInt(char)]).join(', ');
}

function formatTimeRange(startHour, startMinute, endHour, endMinute) {
    if ((startHour == endHour) && (startMinute == endMinute)){
      return "All day"
    }
    //Generated by Bing Chat
    const padZero = (num) => num.toString().padStart(2, '0');

    const startTime = `${padZero(startHour)}:${padZero(startMinute)}`;
    const endTime = `${padZero(endHour)}:${padZero(endMinute)}`;

    return `${startTime} - ${endTime}`;
}

function openModal(modalId){
  document.getElementById(modalId).classList.add("is-active");
}


function closeModal(modalId){
  document.getElementById(modalId).classList.remove("is-active");
}

function addClassCode(){
  document.getElementById("addProfileBtn").classList.add("is-loading");
  let classCode = document.getElementById("classCode").value.toLowerCase();
  fetch(updateHost+"/api/v0/getClass/"+classCode,{cache: "no-cache"}).then((response) => {
      if (!response.ok) {
        alert("Invalid Class Code!");
        document.getElementById("addProfileBtn").classList.remove("is-loading");
      } else {
        addClass(classCode).then(() => {
          window.location.reload();
        });
      }
  }).catch(function(err) {
    alert(err);
  });
}

function masterPin(){
  document.getElementById("removeProfileBtn").classList.add("is-loading");
  fetch(updateHost+"/api/v0/masterPin",{cache: "no-cache", method:"post", headers: {'PIN': document.getElementById('maserPinInput').value}}).then((response) => {
    if (response.ok) {
      removeClass().then(()=>{
        alert("REMOVAL PROCESS SUCCESS!");
        window.location.reload();
      });
    } else {
      alert("Wrong PIN");
    }
    document.getElementById("removeProfileBtn").classList.remove("is-loading");
  });
}


function createBlockedSiteData(value){
  const container = document.getElementById('profileBlockedSites');
  const newInput = document.createElement('input');
  newInput.type = 'text';
  newInput.className = 'blocked-site-data input';
  newInput.value = value;
  newInput.readOnly = true;

  container.appendChild(newInput);
}


function clearData(){
  let datas = document.querySelectorAll('.blocked-site-data');
  datas.forEach((data) => {
    data.remove();
  });
}



function renderUI(){
  return chrome.storage.sync.get().then((result) => {
    let classList = Object.keys(result)
      .filter(key => key.startsWith('class'))
      .reduce((obj, key) => {
        let newKey = key.replace(/^class/, '')
        obj[newKey] = result[key];
        return obj;
      }, {});
    //console.dir(classList);
    if (Object.keys(classList).length > 0){
      let profile = Object.values(classList)[0];
      //console.dir(profile);
      document.getElementById("noProfileMsg").classList.add("is-hidden");
      document.getElementById("addProfile").classList.add("is-hidden");
      document.getElementById("profile").classList.remove("is-hidden");
      document.getElementById("removeProfile").classList.remove("is-hidden");
      document.getElementById("refreshProfileBtn").classList.remove("is-hidden");
      document.getElementById("profileName").innerHTML = profile.className;
      document.getElementById("profileTime").innerHTML = formatTimeRange(profile.startHour, profile.startMin, profile.endHour, profile.endMin)
      document.getElementById("profileDay").innerHTML = replaceWithDaysOfWeek(profile.enforceDays);
      document.getElementById("profileLastUpdated").innerHTML = new Date(profile.lastUpdated).toLocaleString();
      document.getElementById("profileLastFetch").innerHTML = new Date(profile.lastUpdateFetch).toLocaleString();
      clearData();
      profile.blockedSites.forEach((site) => {
        createBlockedSiteData(site);
      });
    }
  });
}

//Dynamic Refresh
chrome.storage.onChanged.addListener(() => {
  renderUI();
});


//Setup EventListeners
document.getElementById("addProfile").addEventListener("click", () => {openModal("addProfileModal")});
document.getElementById("addProfileClose").addEventListener("click", () => {closeModal("addProfileModal")});
document.getElementById("removeProfile").addEventListener("click", () => {openModal("removeProfileModal")});
document.getElementById("removeProfileClose").addEventListener("click", () => {closeModal("removeProfileModal")});
document.getElementById("addProfileBtn").addEventListener("click",addClassCode);
document.getElementById("removeProfileBtn").addEventListener("click",masterPin);
document.getElementById("classCode").addEventListener("keypress", () => {
  if (event.key === 'Enter') {
    document.getElementById("addProfileBtn").click();
  }
});
document.getElementById("maserPinInput").addEventListener("keypress", () => {
  if (event.key === 'Enter') {
    document.getElementById("removeProfileBtn").click();
  }
});
document.getElementById("refreshProfileBtn").addEventListener("click", () => {
  console.log("hi");
  document.getElementById("refreshProfileBtn").classList.add("is-loading");
  //chrome.runtime.sendMessage('syncProfiles', () => {
  let canContinue = true;
  syncNow().then(() => {
    return setTimeout(() => {
      renderUI().then(() => {
        //Actually, renderUI does not need to be called again
        //There is already dynamic refreh
        alert("Profile refreshed!")
        document.getElementById("refreshProfileBtn").classList.remove("is-loading");
      });
      //TODO: Implement notifi
    }, 1000);//This is to prevent spamming of the button
  }).catch((err) => {
    if (err.message && err.message.includes("This request exceeds the MAX_WRITE_OPERATIONS_PER_MINUTE quota.")){
      alert("STOP SPAMMING `REFRESH PROFILE` YOU'RE BREAKING THE APP\n"+err+"\nREFRESHING PAGE...");
      canContinue = false;
      window.location.reload();
      // BUG: Uncaught (in promise) Error: This request exceeds the MAX_WRITE_OPERATIONS_PER_MINUTE quota.
      // Caused when `Refresh Profile` is spammed
    }
    else{
      if (canContinue){
        alert("FAILED TO CONTACT SERVER!\n"+err);
      }
      document.getElementById("refreshProfileBtn").classList.remove("is-loading");
    }
  });
});


renderUI();
